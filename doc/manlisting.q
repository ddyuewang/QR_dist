.man.registerFunc (".qr.exist";".qr";"check if variable exist";".qr.exist";"");
.man.registerArg (".qr.exist";"param";"x:";"a toSymbol");
.man.registerArg (".qr.exist";"return";"";"true if the variable exists; false otherwise");
.man.registerFunc (".qr.getFuncDef";".qr";"check function definition";".qr.getFuncDef";"");
.man.registerArg (".qr.getFuncDef";"param";"func:";"functor or defined function as symbol");
.man.registerFunc (".qr.throw";".qr";"throw the error";".qr.throw";"");
.man.registerArg (".qr.throw";"param";"x:";"error message");
.man.registerFunc (".qr.trycatch";".qr";"protected evaluation";".qr.trycatch";"");
.man.registerArg (".qr.trycatch";"param";"params:";"parameters feed into the function");
.man.registerArg (".qr.trycatch";"param";"func:";"functor or define function (in symbol)");
.man.registerArg (".qr.trycatch";"param";"err:";"error message");
.man.registerFunc (".qr.host";".qr";"return the server name";".qr.host";"");
.man.registerFunc (".qr.ipAddr";".qr";"return the ip address";".qr.ipAddr";"");
.man.registerFunc (".qr.pid";".qr";"return the pid";".qr.pid";"");
.man.registerFunc (".qr.pwd";".qr";"return the current directory";".qr.pwd";"");
.man.registerFunc (".qr.R.close";".qr";"close R session";".qr.R.close";"");
.man.registerFunc (".qr.R.eval";".qr";"eval R code";".qr.R.eval";"");
.man.registerArg (".qr.R.eval";"param";"x:";"R code in string");
.man.registerFunc (".qr.R.get";".qr";"get the value of the variable from R session";".qr.R.get";"");
.man.registerArg (".qr.R.get";"param";"x:";"variable from R session in string format");
.man.registerArg (".qr.R.get";"return:";"";"res from R code executed");
.man.registerFunc (".qr.R.include";".qr";"include a package in R";".qr.R.include";"");
.man.registerArg (".qr.R.include";"param";"x:";"packag name");
.man.registerFunc (".qr.R.init";".qr";"init the R session";".qr.R.init";"");
.man.registerFunc (".qr.R.install";".qr";"install a package in R";".qr.R.install";"");
.man.registerArg (".qr.R.install";"param";"x:";"packag name");
.man.registerFunc (".qr.R.open";".qr";"open R session";".qr.R.open";"");
.man.registerFunc (".qr.R.set";".qr";"set the value of the variable from R to hold Q datatype";".qr.R.set";"");
.man.registerArg (".qr.R.set";"param";"y:";"q literal data");
.man.registerArg (".qr.R.set";"param";"x:";"variable from R session in string format");
.man.registerFunc ("a";".";"";"a";"");
.man.registerFunc (".qr.getParam";".qr";"retrive parameter";".qr.getParam";"");
.man.registerArg (".qr.getParam";"param";"x:";"key");
.man.registerFunc (".qr.listParams";".qr";"list the params";".qr.listParams";"");
.man.registerFunc (".qr.param";".qr";"construct a parameter";".qr.param";"");
.man.registerArg (".qr.param";"param";"y:";"default value");
.man.registerArg (".qr.param";"param";"x:";"key");
.man.registerFunc (".qr.setParams";".qr";"set the params";".qr.setParams";"");
.man.registerArg (".qr.setParams";"param";"x:";"key value pair dictionary for all the parameters");
.man.registerFunc (".qr.bitsTo";".qr";"convert bits to other type";".qr.bitsTo";"");
.man.registerArg (".qr.bitsTo";"param";"y:";"Q dataType");
.man.registerArg (".qr.bitsTo";"param";"x:";"type to convert to");
.man.registerArg (".qr.bitsTo";"return";"";"the coverted data");
.man.registerFunc (".qr.bytesTo";".qr";"convert bytes to other type";".qr.bytesTo";"");
.man.registerArg (".qr.bytesTo";"param";"y:";"Q dataType");
.man.registerArg (".qr.bytesTo";"param";"x:";"type to convert to");
.man.registerArg (".qr.bytesTo";"return";"";"the coverted data");
.man.registerFunc (".qr.initType";".qr";"init type";".qr.initType";"");
.man.registerFunc (".qr.isFunction";".qr";"check if x is a function";".qr.isFunction";"");
.man.registerArg (".qr.isFunction";"param";"x:";"q data type");
.man.registerArg (".qr.isFunction";"return";"";"true if x is function; false otherwise");
.man.registerFunc (".qr.isInteger";".qr";"check if x is an integer";".qr.isInteger";"");
.man.registerArg (".qr.isInteger";"param";"x:";"q data type");
.man.registerArg (".qr.isInteger";"return";"";"true if x is an integer");
.man.registerFunc (".qr.isList";".qr";"check if input is list";".qr.isList";"");
.man.registerArg (".qr.isList";"param";"x:";"Q data type");
.man.registerArg (".qr.isList";"return";"";"true if x is a list; false otherwise");
.man.registerFunc (".qr.listTypes";".qr";"list type";".qr.listTypes";"");
.man.registerFunc (".qr.mergeSym";".qr";"merge the symbol";".qr.mergeSym";"");
.man.registerArg (".qr.mergeSym";"param";"y:";"symbol");
.man.registerArg (".qr.mergeSym";"param";"x:";"symbol");
.man.registerArg (".qr.mergeSym";"return";"";"the symbol got merged");
.man.registerFunc (".qr.toBase";".qr";"convert the base presentation of number to integer";".qr.toBase";"");
.man.registerArg (".qr.toBase";"param";"y:";"base");
.man.registerArg (".qr.toBase";"param";"x:";"vector repsenting the bits array");
.man.registerArg (".qr.toBase";"return";"";"the data converted from base into integer");
.man.registerFunc (".qr.toBits";".qr";"convert bits to integer";".qr.toBits";"");
.man.registerArg (".qr.toBits";"param";"x:";"bits array");
.man.registerArg (".qr.toBits";"return";"";"the integer value of x");
.man.registerFunc (".qr.toBytes";".qr";"convert bytes to integer";".qr.toBytes";"");
.man.registerArg (".qr.toBytes";"param";"x:";"bytes");
.man.registerArg (".qr.toBytes";"return";"";"the integer value of x");
.man.registerFunc (".qr.toString";".qr";"convert to string";".qr.toString";"");
.man.registerArg (".qr.toString";"param";"x:";"a Q datatype");
.man.registerArg (".qr.toString";"return";"";"the string presentation of x");
.man.registerFunc (".qr.toSymbol";".qr";"convert to symbol";".qr.toSymbol";"");
.man.registerArg (".qr.toSymbol";"param";"x:";"a Q datatype");
.man.registerArg (".qr.toSymbol";"return";"";"the symbol presentation of x");
.man.registerFunc (".qr.quant.complex.add";".qr";"add two complex number";".qr.quant.complex.add";"");
.man.registerArg (".qr.quant.complex.add";"param";"y:";"complex number");
.man.registerArg (".qr.quant.complex.add";"param";"x:";"complex number");
.man.registerArg (".qr.quant.complex.add";"return";"";"x+y");
.man.registerFunc (".qr.quant.complex.cosh";".qr";"compute the hyperbolic cos";".qr.quant.complex.cosh";"");
.man.registerArg (".qr.quant.complex.cosh";"param";"x:";"compldex number");
.man.registerArg (".qr.quant.complex.cosh";"return";"";"the cosh of x");
.man.registerFunc (".qr.quant.complex.coth";".qr";"compute the hyperbolic cot";".qr.quant.complex.coth";"");
.man.registerArg (".qr.quant.complex.coth";"param";"x:";"compldex number");
.man.registerArg (".qr.quant.complex.coth";"return";"";"the coth of x");
.man.registerFunc (".qr.quant.complex.dft";".qr";"perform Discrete Fourier Transform";".qr.quant.complex.dft";"");
.man.registerArg (".qr.quant.complex.dft";"param";"yl:";"original series");
.man.registerArg (".qr.quant.complex.dft";"param";"k:";"index on the Fourier Series");
.man.registerArg (".qr.quant.complex.dft";"return";"";"the index k element on the Fourier Series transformed from yl");
.man.registerFunc (".qr.quant.complex.divide";".qr";"calculate the ratio of two complex number";".qr.quant.complex.divide";"");
.man.registerArg (".qr.quant.complex.divide";"param";"y:";"complex number");
.man.registerArg (".qr.quant.complex.divide";"param";"x:";"complex number");
.man.registerArg (".qr.quant.complex.divide";"return";"";"x / y");
.man.registerFunc (".qr.quant.complex.exp";".qr";"calculate the exponential of complex number using Euler's rule";".qr.quant.complex.exp";"");
.man.registerArg (".qr.quant.complex.exp";"param";"x:";"complex number");
.man.registerFunc (".qr.quant.complex.idft";".qr";"perform Inverse Discrete Fourier Transform";".qr.quant.complex.idft";"");
.man.registerArg (".qr.quant.complex.idft";"param";"zk:";"original series");
.man.registerArg (".qr.quant.complex.idft";"param";"l:";"index on the Fourier Series");
.man.registerArg (".qr.quant.complex.idft";"return";"";"the index k element on the original Series");
.man.registerFunc (".qr.quant.complex.isComplex";".qr";"check if x is a complex number";".qr.quant.complex.isComplex";"");
.man.registerArg (".qr.quant.complex.isComplex";"param";"x:";"Q data type");
.man.registerArg (".qr.quant.complex.isComplex";"return";"";"true if it is a complex number in dictionary format `real`imaginary!...");
.man.registerFunc (".qr.quant.complex.minus";".qr";"calculate the difference of two complex number";".qr.quant.complex.minus";"");
.man.registerArg (".qr.quant.complex.minus";"param";"y:";"complex number");
.man.registerArg (".qr.quant.complex.minus";"param";"x:";"complex number");
.man.registerArg (".qr.quant.complex.minus";"return";"";"x-y");
.man.registerFunc (".qr.quant.complex.multiply";".qr";"calculate the product of two complex number";".qr.quant.complex.multiply";"");
.man.registerArg (".qr.quant.complex.multiply";"param";"y:";"complex number");
.man.registerArg (".qr.quant.complex.multiply";"param";"x:";"complex number");
.man.registerArg (".qr.quant.complex.multiply";"return";"";"x * y");
.man.registerFunc (".qr.quant.complex.number";".qr";"construct a complex number";".qr.quant.complex.number";"");
.man.registerArg (".qr.quant.complex.number";"param";"y:";"imaginary part return the complex number x+yi");
.man.registerArg (".qr.quant.complex.number";"param";"x:";"real part");
.man.registerFunc (".qr.quant.complex.reciprocal";".qr";"calculate the reciprocal of complex number";".qr.quant.complex.reciprocal";"");
.man.registerArg (".qr.quant.complex.reciprocal";"param";"y:";"complex number");
.man.registerArg (".qr.quant.complex.reciprocal";"param";"x:";"complex number");
.man.registerArg (".qr.quant.complex.reciprocal";"return";"";"1 / x");
.man.registerFunc (".qr.quant.complex.sinh";".qr";"compute the hyperbolic sin";".qr.quant.complex.sinh";"");
.man.registerArg (".qr.quant.complex.sinh";"param";"x:";"compldex number");
.man.registerArg (".qr.quant.complex.sinh";"return";"";"the sinh of x");
.man.registerFunc (".qr.quant.complex.tanh";".qr";"compute the hyperbolic tan";".qr.quant.complex.tanh";"");
.man.registerArg (".qr.quant.complex.tanh";"param";"x:";"compldex number");
.man.registerArg (".qr.quant.complex.tanh";"return";"";"the tanh of x");
.man.registerFunc (".qr.quant.complex.toComplex";".qr";"convert a real number to complex number";".qr.quant.complex.toComplex";"");
.man.registerArg (".qr.quant.complex.toComplex";"param";"x:";"a real number return the complex number with x+0i");
.man.registerFunc (".qr.quant.bip.priv.bfs";".qr";"";".qr.quant.bip.priv.bfs";"");
.man.registerFunc (".qr.quant.bip.priv.calcNode";".qr";"";".qr.quant.bip.priv.calcNode";"");
.man.registerFunc (".qr.quant.bip.priv.generateNode";".qr";"";".qr.quant.bip.priv.generateNode";"");
.man.registerFunc (".qr.quant.bip.solve";".qr";"solve min(max) y'b, s.t. y'A >=(<=) c, with y as binary (1 or 0) using relaxation to lp with simplex algorithm";".qr.quant.bip.solve";"");
.man.registerArg (".qr.quant.bip.solve";"param";"b:";"objective function coefficients");
.man.registerArg (".qr.quant.bip.solve";"param";"A:";"constraint matrix");
.man.registerArg (".qr.quant.bip.solve";"param";"constr:";"constraint vector");
.man.registerArg (".qr.quant.bip.solve";"dir:";"";"objective direction, either `max or `min");
.man.registerArg (".qr.quant.bip.solve";"method:";"";"indicate which method to use, must be one either `explicit or `implicit");
.man.registerArg (".qr.quant.bip.solve";"return";"";"the result in a dictionary with optimal solution");
.man.registerFunc (".qr.quant.bip.solveExplicit";".qr";"solve min(max) y'b, s.t. y'A >=(<=) c, with y as binary (1 or 0) using relaxation to lp with simplex algorithm";".qr.quant.bip.solveExplicit";"");
.man.registerArg (".qr.quant.bip.solveExplicit";"param";"b:";"objective function coefficients");
.man.registerArg (".qr.quant.bip.solveExplicit";"param";"A:";"constraint matrix");
.man.registerArg (".qr.quant.bip.solveExplicit";"param";"constr:";"constraint vector");
.man.registerArg (".qr.quant.bip.solveExplicit";"dir:";"";"objective direction, either `max or `min");
.man.registerArg (".qr.quant.bip.solveExplicit";"return";"";"the result in a dictionary with optimal solution");
.man.registerFunc (".qr.quant.bip.solveImplicit";".qr";"solve min(max) y'b, s.t. y'A >=(<=) c, with y as binary (1 or 0) using implicit enumeration method";".qr.quant.bip.solveImplicit";"");
.man.registerArg (".qr.quant.bip.solveImplicit";"param";"b:";"objective function coefficients");
.man.registerArg (".qr.quant.bip.solveImplicit";"param";"A:";"constraint matrix");
.man.registerArg (".qr.quant.bip.solveImplicit";"param";"constr:";"constraint vector");
.man.registerArg (".qr.quant.bip.solveImplicit";"dir:";"";"objective direction, either `max or `min");
.man.registerArg (".qr.quant.bip.solveImplicit";"return";"";"the result in a dictionary with optimal solution");
.man.registerFunc (".qr.quant.ip.solve";".qr";"solve min(max) y'b, s.t. y'A >=(<=) c, with y as integer only";".qr.quant.ip.solve";"");
.man.registerArg (".qr.quant.ip.solve";"param";"xconstr:";"constraint on variable");
.man.registerArg (".qr.quant.ip.solve";"param";"b:";"objective function coefficients");
.man.registerArg (".qr.quant.ip.solve";"param";"A:";"constraint matrix");
.man.registerArg (".qr.quant.ip.solve";"param";"constr:";"constraint vector");
.man.registerArg (".qr.quant.ip.solve";"dir:";"";"objective direction, either `max or `min");
.man.registerArg (".qr.quant.ip.solve";"return";"";"the result in a dictionary with optimal solution");
.man.registerFunc (".qr.quant.mip.priv.bfs";".qr";"perform a breadth search tree to do Branch-and-Bound";".qr.quant.mip.priv.bfs";"");
.man.registerFunc (".qr.quant.mip.solve";".qr";"solve min(max) y'b, s.t. y'A >=(<=) c, with y as mixed integer";".qr.quant.mip.solve";"");
.man.registerArg (".qr.quant.mip.solve";"param";"iconstr:";"integer constraint, with 1b stands for integer only; 0b otherwise");
.man.registerArg (".qr.quant.mip.solve";"param";"xconstr:";"constraint on variable");
.man.registerArg (".qr.quant.mip.solve";"param";"b:";"objective function coefficients");
.man.registerArg (".qr.quant.mip.solve";"param";"A:";"constraint matrix");
.man.registerArg (".qr.quant.mip.solve";"param";"constr:";"constraint vector");
.man.registerArg (".qr.quant.mip.solve";"dir:";"";"objective direction, either `max or `min");
.man.registerArg (".qr.quant.mip.solve";"return";"";"the result in a dictionary with optimal solution");
.man.registerFunc (".qr.quant.lp.priv.A_transform";".qr";"";".qr.quant.lp.priv.A_transform";"");
.man.registerFunc (".qr.quant.lp.priv.b_transform";".qr";"transform on b, c, and A during pivoting, according to simplex method";".qr.quant.lp.priv.b_transform";"");
.man.registerFunc (".qr.quant.lp.priv.c_transform";".qr";"";".qr.quant.lp.priv.c_transform";"");
.man.registerFunc (".qr.quant.lp.priv.choosePivot";".qr";"choose the pivot always choose the least subscript to avoid cycling";".qr.quant.lp.priv.choosePivot";"");
.man.registerFunc (".qr.quant.lp.priv.format";".qr";"format the lp object into result";".qr.quant.lp.priv.format";"");
.man.registerFunc (".qr.quant.lp.priv.pivot";".qr";"pivot on row i and column j";".qr.quant.lp.priv.pivot";"");
.man.registerFunc (".qr.quant.lp.simplex";".qr";"solve the linear programming problem in simplex method";".qr.quant.lp.simplex";"");
.man.registerArg (".qr.quant.lp.simplex";"param";"lp:";"the linear programming problem in Dictionary");
.man.registerArg (".qr.quant.lp.simplex";"return";"";"the result in a dictionary with optimal solution");
.man.registerFunc (".qr.quant.lp.solve";".qr";"solve min(max) y'b, s.t. y'A >=(<=) c";".qr.quant.lp.solve";"");
.man.registerArg (".qr.quant.lp.solve";"param";"xconstr:";"constraint on variable");
.man.registerArg (".qr.quant.lp.solve";"param";"b:";"objective function coefficients");
.man.registerArg (".qr.quant.lp.solve";"param";"A:";"constraint matrix");
.man.registerArg (".qr.quant.lp.solve";"param";"constr:";"constraint vector");
.man.registerArg (".qr.quant.lp.solve";"dir:";"";"objective direction, either `max or `min");
.man.registerArg (".qr.quant.lp.solve";"return";"";"the result in a dictionary with optimal solution");
.man.registerFunc (".qr.quant.lp.solveMin";".qr";"solve min(max) y'b, s.t. y'A >=(<=) c";".qr.quant.lp.solveMin";"");
.man.registerArg (".qr.quant.lp.solveMin";"param";"xconstr:";"constraint on variable");
.man.registerArg (".qr.quant.lp.solveMin";"param";"b:";"objective function coefficients");
.man.registerArg (".qr.quant.lp.solveMin";"param";"A:";"constraint matrix");
.man.registerArg (".qr.quant.lp.solveMin";"param";"constr:";"constraint vector");
.man.registerArg (".qr.quant.lp.solveMin";"return";"";"the result in a dictionary with optimal solution");
.man.registerFunc (".qr.quant.mat.LUP";".qr";"LU decomposition with partial pivoting";".qr.quant.mat.LUP";"");
.man.registerArg (".qr.quant.mat.LUP";"param";"A:";"square matrix");
.man.registerArg (".qr.quant.mat.LUP";"return";"";"the LUP decomposition of A");
.man.registerFunc (".qr.quant.mat.PLU";".qr";"PLU decomposition with partial pivoting";".qr.quant.mat.PLU";"");
.man.registerArg (".qr.quant.mat.PLU";"param";"A:";"square matrix");
.man.registerArg (".qr.quant.mat.PLU";"return";"";"the PLU decomposition of A");
.man.registerFunc (".qr.quant.mat.QR";".qr";"QR decomposition";".qr.quant.mat.QR";"");
.man.registerArg (".qr.quant.mat.QR";"param";"A:";"square matrix");
.man.registerArg (".qr.quant.mat.QR";"return";"";"the QR decomposition of A");
.man.registerFunc (".qr.quant.mat.SVD";".qr";"SVD decomposition";".qr.quant.mat.SVD";"");
.man.registerArg (".qr.quant.mat.SVD";"param";"A:";"matrix");
.man.registerArg (".qr.quant.mat.SVD";"return";"";"the SVD decomposition of A");
.man.registerFunc (".qr.quant.mat.chol";".qr";"Cholesky decomposition";".qr.quant.mat.chol";"");
.man.registerArg (".qr.quant.mat.chol";"param";"A:";"square matrix");
.man.registerArg (".qr.quant.mat.chol";"return";"";"the Cholesky decomposition of A");
.man.registerFunc (".qr.quant.mat.crout";".qr";"thomas/crout algorithm";".qr.quant.mat.crout";"");
.man.registerArg (".qr.quant.mat.crout";"param";"A:";"tri-diagonal and diagonal dominant matrix");
.man.registerArg (".qr.quant.mat.crout";"return";"";"the LL' decomposition of A");
.man.registerFunc (".qr.quant.mat.det";".qr";"compute the determinant of matrix";".qr.quant.mat.det";"");
.man.registerArg (".qr.quant.mat.det";"param";"A:";"square matrix");
.man.registerArg (".qr.quant.mat.det";"return";"";"the determinant of  matrix");
.man.registerFunc (".qr.quant.mat.diag";".qr";"return the diagonal matrix given vector";".qr.quant.mat.diag";"");
.man.registerArg (".qr.quant.mat.diag";"param";"x:";"vector");
.man.registerArg (".qr.quant.mat.diag";"return";"";"the matrix with diagonal only");
.man.registerFunc (".qr.quant.mat.diagVec";".qr";"return the diagonal vector given matrix";".qr.quant.mat.diagVec";"");
.man.registerArg (".qr.quant.mat.diagVec";"param";"i:";"sub diagonal index");
.man.registerArg (".qr.quant.mat.diagVec";"param";"A:";"matrix");
.man.registerArg (".qr.quant.mat.diagVec";"return";"";"the diagonal vector of the matrix");
.man.registerFunc (".qr.quant.mat.dim";".qr";"return the dimenion of the matrix";".qr.quant.mat.dim";"");
.man.registerArg (".qr.quant.mat.dim";"param";"A:";"matrix");
.man.registerArg (".qr.quant.mat.dim";"return";"";"(m;n) where m is the row dimension and n is the column dimension");
.man.registerFunc (".qr.quant.mat.eigen";".qr";"compute the eigenvalues and vectors";".qr.quant.mat.eigen";"");
.man.registerArg (".qr.quant.mat.eigen";"param";"A:";"matrix");
.man.registerArg (".qr.quant.mat.eigen";"return";"";"the eigine values with corresponding eigine vectors of A");
.man.registerFunc (".qr.quant.mat.identity";".qr";"return the identity matrix of nxn";".qr.quant.mat.identity";"");
.man.registerArg (".qr.quant.mat.identity";"param";"n:";"dimension of the matrix");
.man.registerArg (".qr.quant.mat.identity";"return";"";"the matrix only contains zeros");
.man.registerFunc (".qr.quant.mat.isDiagDominant";".qr";"check if matrix is diagonal dominant";".qr.quant.mat.isDiagDominant";"");
.man.registerArg (".qr.quant.mat.isDiagDominant";"param";"A:";"square matrix");
.man.registerArg (".qr.quant.mat.isDiagDominant";"return";"";"true is matrix is diagonal dominant; false otherwise");
.man.registerFunc (".qr.quant.mat.isPosDef";".qr";"check if matrix is positive definite";".qr.quant.mat.isPosDef";"");
.man.registerArg (".qr.quant.mat.isPosDef";"param";"A:";"square matrix");
.man.registerArg (".qr.quant.mat.isPosDef";"return";"";"true is matrix is positive definite; false otherwise");
.man.registerFunc (".qr.quant.mat.isPosSemiDef";".qr";"check if matrix is positive semi definite";".qr.quant.mat.isPosSemiDef";"");
.man.registerArg (".qr.quant.mat.isPosSemiDef";"param";"A:";"square matrix");
.man.registerArg (".qr.quant.mat.isPosSemiDef";"return";"";"true is matrix is positive semi definite; false otherwise");
.man.registerFunc (".qr.quant.mat.isSquare";".qr";"check if matrix is square";".qr.quant.mat.isSquare";"");
.man.registerArg (".qr.quant.mat.isSquare";"param";"A:";"square");
.man.registerArg (".qr.quant.mat.isSquare";"return";"";"true if matrix is square matrix; false otherwise");
.man.registerFunc (".qr.quant.mat.isTriDiag";".qr";"check if matrix is Tri-Diagonal";".qr.quant.mat.isTriDiag";"");
.man.registerArg (".qr.quant.mat.isTriDiag";"param";"A:";"square matrix");
.man.registerArg (".qr.quant.mat.isTriDiag";"return";"";"true is matrix is Tri-Diagnal; false otherwise");
.man.registerFunc (".qr.quant.mat.minors";".qr";"compute leading principal minors";".qr.quant.mat.minors";"");
.man.registerArg (".qr.quant.mat.minors";"param";"A:";"square matrix");
.man.registerFunc (".qr.quant.mat.priv.checkSquare";".qr";"";".qr.quant.mat.priv.checkSquare";"");
.man.registerFunc (".qr.quant.mat.rand";".qr";"return a randomise matrix from 0 and 1";".qr.quant.mat.rand";"");
.man.registerArg (".qr.quant.mat.rand";"param";"rng:";"random number generator");
.man.registerArg (".qr.quant.mat.rand";"param";"n:";"column dimension");
.man.registerArg (".qr.quant.mat.rand";"param";"m:";"row dimension");
.man.registerFunc (".qr.quant.mat.solve";".qr";"solve Ax=b";".qr.quant.mat.solve";"");
.man.registerArg (".qr.quant.mat.solve";"param";"b:";"vector");
.man.registerArg (".qr.quant.mat.solve";"param";"A:";"matrix");
.man.registerArg (".qr.quant.mat.solve";"return";"";"x whhich solves Ax=b");
.man.registerFunc (".qr.quant.mat.subDiagVec";".qr";"return the subdiagonal vector given matrix";".qr.quant.mat.subDiagVec";"");
.man.registerArg (".qr.quant.mat.subDiagVec";"param";"i:";"sub diagonal index");
.man.registerArg (".qr.quant.mat.subDiagVec";"param";"A:";"matrix");
.man.registerArg (".qr.quant.mat.subDiagVec";"return";"";"the subdiagonal vector of the matrix");
.man.registerFunc (".qr.quant.mat.zeros";".qr";"return the 0 matrix of mxn";".qr.quant.mat.zeros";"");
.man.registerArg (".qr.quant.mat.zeros";"param";"n:";"column dimension");
.man.registerArg (".qr.quant.mat.zeros";"param";"m:";"row dimension");
.man.registerArg (".qr.quant.mat.zeros";"return";"";"the matrix only contains zeros");
.man.registerFunc (".qr.quant.math.beta";".qr";"return the beta function";".qr.quant.math.beta";"");
.man.registerArg (".qr.quant.math.beta";"param";"alpha:";"an real number");
.man.registerArg (".qr.quant.math.beta";"param";"beta:";"an real number");
.man.registerArg (".qr.quant.math.beta";"return";"";"beta function evaluated at x");
.man.registerFunc (".qr.quant.math.betaIncomp";".qr";"return the incomplete beta function evluated at x";".qr.quant.math.betaIncomp";"");
.man.registerArg (".qr.quant.math.betaIncomp";"param";"alpha:";"an real number");
.man.registerArg (".qr.quant.math.betaIncomp";"param";"x:";"an real number");
.man.registerArg (".qr.quant.math.betaIncomp";"param";"beta:";"an real number");
.man.registerArg (".qr.quant.math.betaIncomp";"return";"";"incomplete beta function evaluated at x");
.man.registerFunc (".qr.quant.math.betaIncompRegularised";".qr";"return the regularised incomplete beta function evluated at x";".qr.quant.math.betaIncompRegularised";"");
.man.registerArg (".qr.quant.math.betaIncompRegularised";"param";"alpha:";"an real number");
.man.registerArg (".qr.quant.math.betaIncompRegularised";"param";"x:";"an real number");
.man.registerArg (".qr.quant.math.betaIncompRegularised";"param";"beta:";"an real number");
.man.registerArg (".qr.quant.math.betaIncompRegularised";"return";"";"regularised incomplete beta function evaluated at x");
.man.registerFunc (".qr.quant.math.ceil";".qr";"ceil";".qr.quant.math.ceil";"");
.man.registerArg (".qr.quant.math.ceil";"param";"x:";"q data type");
.man.registerArg (".qr.quant.math.ceil";"return";"";"ceil x");
.man.registerFunc (".qr.quant.math.comb";".qr";"return n choose x";".qr.quant.math.comb";"");
.man.registerArg (".qr.quant.math.comb";"param";"x:";"number of items to ben chosen");
.man.registerArg (".qr.quant.math.comb";"param";"n:";"number of items to chose from");
.man.registerArg (".qr.quant.math.comb";"return";"";"the number of combinations");
.man.registerFunc (".qr.quant.math.cosh";".qr";"return the hyperbolic cos of x";".qr.quant.math.cosh";"");
.man.registerArg (".qr.quant.math.cosh";"param";"x:";"an real number");
.man.registerArg (".qr.quant.math.cosh";"return";"";"hyperbolic cos evaluated at x");
.man.registerFunc (".qr.quant.math.coth";".qr";"return the hyperbolic cotan of x";".qr.quant.math.coth";"");
.man.registerArg (".qr.quant.math.coth";"param";"x:";"an real number");
.man.registerArg (".qr.quant.math.coth";"return";"";"hyperbolic cotan evaluated at x");
.man.registerFunc (".qr.quant.math.erf";".qr";"return the error function of x";".qr.quant.math.erf";"");
.man.registerArg (".qr.quant.math.erf";"param";"x:";"an real number");
.man.registerArg (".qr.quant.math.erf";"return";"";"error function evaluated at x");
.man.registerFunc (".qr.quant.math.erfInv";".qr";"return the inverse of error function of x";".qr.quant.math.erfInv";"");
.man.registerArg (".qr.quant.math.erfInv";"param";"x:";"an real number");
.man.registerArg (".qr.quant.math.erfInv";"return";"";"inverse of error function evaluated at x");
.man.registerFunc (".qr.quant.math.erfc";".qr";"return the compliment of error function of x";".qr.quant.math.erfc";"");
.man.registerArg (".qr.quant.math.erfc";"param";"x:";"an real number");
.man.registerArg (".qr.quant.math.erfc";"return";"";"compliment of error function evaluated at x");
.man.registerFunc (".qr.quant.math.erfcInv";".qr";"return the inverse of compliment of error function of x";".qr.quant.math.erfcInv";"");
.man.registerArg (".qr.quant.math.erfcInv";"param";"x:";"an real number");
.man.registerArg (".qr.quant.math.erfcInv";"return";"";"inverse of compliment of error function evaluated at x");
.man.registerFunc (".qr.quant.math.factorial";".qr";"return the factorial of x";".qr.quant.math.factorial";"");
.man.registerArg (".qr.quant.math.factorial";"param";"x:";"an integer");
.man.registerArg (".qr.quant.math.factorial";"return";"";"factorial evaluated at x");
.man.registerFunc (".qr.quant.math.floor";".qr";"floor";".qr.quant.math.floor";"");
.man.registerArg (".qr.quant.math.floor";"param";"x:";"q data type");
.man.registerArg (".qr.quant.math.floor";"return";"";"floor x");
.man.registerFunc (".qr.quant.math.gamma";".qr";"return the gamma function of z using The Lanczos Approximation";".qr.quant.math.gamma";"");
.man.registerArg (".qr.quant.math.gamma";"param";"z:";"an real number");
.man.registerArg (".qr.quant.math.gamma";"return";"";"gamma function evaluated at z");
.man.registerFunc (".qr.quant.math.gammaIncompH";".qr";"return the incomplete higher gamma function";".qr.quant.math.gammaIncompH";"");
.man.registerArg (".qr.quant.math.gammaIncompH";"param";"z:";"an real number");
.man.registerArg (".qr.quant.math.gammaIncompH";"param";"x:";"upper bound of the integral");
.man.registerArg (".qr.quant.math.gammaIncompH";"return";"";"value of the incomplete higher gamma function");
.man.registerFunc (".qr.quant.math.gammaIncompL";".qr";"return the incomplete lower gamma function";".qr.quant.math.gammaIncompL";"");
.man.registerArg (".qr.quant.math.gammaIncompL";"param";"z:";"an real number");
.man.registerArg (".qr.quant.math.gammaIncompL";"param";"x:";"upper bound of the integral");
.man.registerArg (".qr.quant.math.gammaIncompL";"return";"";"value of the incomplete lower gamma function");
.man.registerFunc (".qr.quant.math.gammaIncompRegularisedH";".qr";"return the regularised incomplete higher gamma function";".qr.quant.math.gammaIncompRegularisedH";"");
.man.registerArg (".qr.quant.math.gammaIncompRegularisedH";"param";"z:";"an real number");
.man.registerArg (".qr.quant.math.gammaIncompRegularisedH";"param";"x:";"upper bound of the integral");
.man.registerArg (".qr.quant.math.gammaIncompRegularisedH";"return";"";"value of the regularised incomplete higher gamma function");
.man.registerFunc (".qr.quant.math.gammaIncompRegularisedL";".qr";"return the regularised incomplete lower gamma function";".qr.quant.math.gammaIncompRegularisedL";"");
.man.registerArg (".qr.quant.math.gammaIncompRegularisedL";"param";"z:";"an real number");
.man.registerArg (".qr.quant.math.gammaIncompRegularisedL";"param";"x:";"upper bound of the integral");
.man.registerArg (".qr.quant.math.gammaIncompRegularisedL";"return";"";"value of the regularised incomplete lower gamma function");
.man.registerFunc (".qr.quant.math.lanczosCoef";".qr";"return the lanczos coefficients";".qr.quant.math.lanczosCoef";"");
.man.registerArg (".qr.quant.math.lanczosCoef";"param";"n:";"accuracy");
.man.registerArg (".qr.quant.math.lanczosCoef";"return";"";"the lanzcos coef");
.man.registerFunc (".qr.quant.math.pi";".qr";"";".qr.quant.math.pi";"");
.man.registerFunc (".qr.quant.math.priv.calcErfInvCoef";".qr";"";".qr.quant.math.priv.calcErfInvCoef";"");
.man.registerFunc (".qr.quant.math.priv.logBeta";".qr";"private functions";".qr.quant.math.priv.logBeta";"");
.man.registerFunc (".qr.quant.math.priv.logBetaIncomp";".qr";"";".qr.quant.math.priv.logBetaIncomp";"");
.man.registerFunc (".qr.quant.math.priv.logGamma";".qr";"";".qr.quant.math.priv.logGamma";"");
.man.registerFunc (".qr.quant.math.priv.logGammaIncompL";".qr";"";".qr.quant.math.priv.logGammaIncompL";"");
.man.registerFunc (".qr.quant.math.sinh";".qr";"return the hyperbolic sin of x";".qr.quant.math.sinh";"");
.man.registerArg (".qr.quant.math.sinh";"param";"x:";"an real number");
.man.registerArg (".qr.quant.math.sinh";"return";"";"hyperbolic sin evaluated at x");
.man.registerFunc (".qr.quant.math.tanh";".qr";"return the hyperbolic tan of x";".qr.quant.math.tanh";"");
.man.registerArg (".qr.quant.math.tanh";"param";"x:";"an real number");
.man.registerArg (".qr.quant.math.tanh";"return";"";"hyperbolic tan evaluated at x");
.man.registerFunc (".qr.quant.numeric.bisection";".qr";"find the root using bisection method";".qr.quant.numeric.bisection";"");
.man.registerArg (".qr.quant.numeric.bisection";"param";"func:";"function f(x)");
.man.registerArg (".qr.quant.numeric.bisection";"param";"b:";"right point on x");
.man.registerArg (".qr.quant.numeric.bisection";"param";"a:";"1eft point on x");
.man.registerArg (".qr.quant.numeric.bisection";"return";"";"the root");
.man.registerFunc (".qr.quant.numeric.delta";".qr";"return the numerical delta";".qr.quant.numeric.delta";"");
.man.registerArg (".qr.quant.numeric.delta";"param";"func:";"differenctiable func at x");
.man.registerArg (".qr.quant.numeric.delta";"param";"x:";"differentialble point");
.man.registerArg (".qr.quant.numeric.delta";"param";"mode:";"must be one of `forward`backward`central");
.man.registerArg (".qr.quant.numeric.delta";"return";"";"the numerical delta");
.man.registerFunc (".qr.quant.numeric.integral";".qr";"compute the integral of f using Adaptive Simpson's Method";".qr.quant.numeric.integral";"");
.man.registerArg (".qr.quant.numeric.integral";"param";"func:";"integrated function");
.man.registerArg (".qr.quant.numeric.integral";"param";"b:";"end point");
.man.registerArg (".qr.quant.numeric.integral";"param";"a:";"start point");
.man.registerArg (".qr.quant.numeric.integral";"return";"";"the numerical integral of func integrated from a to b");
.man.registerFunc (".qr.quant.numeric.interp";".qr";"linear interpolation";".qr.quant.numeric.interp";"");
.man.registerArg (".qr.quant.numeric.interp";"param";"values:";"values of f on x");
.man.registerArg (".qr.quant.numeric.interp";"param";"ptsInt:";"points to interpolate");
.man.registerArg (".qr.quant.numeric.interp";"param";"pts:";"points of x");
.man.registerArg (".qr.quant.numeric.interp";"return";"";"the interploation on ptsInt given the original x and f(x)");
.man.registerFunc (".qr.quant.numeric.newton";".qr";"find the root using newton method";".qr.quant.numeric.newton";"");
.man.registerArg (".qr.quant.numeric.newton";"param";"func:";"function f(x)");
.man.registerArg (".qr.quant.numeric.newton";"param";"gradient:";"1st order derivative f'(x)");
.man.registerArg (".qr.quant.numeric.newton";"return";"";"the root");
.man.registerFunc (".qr.quant.numeric.priv.integral";".qr";"";".qr.quant.numeric.priv.integral";"");
.man.registerFunc (".qr.quant.numeric.secondOrderDiff";".qr";"return the second order difference";".qr.quant.numeric.secondOrderDiff";"");
.man.registerArg (".qr.quant.numeric.secondOrderDiff";"param";"func:";"differenctiable func at x");
.man.registerArg (".qr.quant.numeric.secondOrderDiff";"param";"x:";"differentialble point");
.man.registerArg (".qr.quant.numeric.secondOrderDiff";"return";"";"the numerical second order difference");
.man.registerFunc (".qr.quant.numeric.simpson";".qr";"compute the integral of f using Simpson's rule";".qr.quant.numeric.simpson";"");
.man.registerArg (".qr.quant.numeric.simpson";"param";"func:";"integrated function");
.man.registerArg (".qr.quant.numeric.simpson";"param";"b:";"end point");
.man.registerArg (".qr.quant.numeric.simpson";"param";"a:";"start point");
.man.registerArg (".qr.quant.numeric.simpson";"return";"";"the numerical integral of func using one step Simpon's rule");
.man.registerFunc (".qr.quant.dist.bernoulli.cdf";".qr";"";".qr.quant.dist.bernoulli.cdf";"");
.man.registerFunc (".qr.quant.dist.bernoulli.pdf";".qr";"bernoulli";".qr.quant.dist.bernoulli.pdf";"");
.man.registerFunc (".qr.quant.dist.beta.cdf";".qr";"return the cumulative probablity given beta distribution";".qr.quant.dist.beta.cdf";"");
.man.registerArg (".qr.quant.dist.beta.cdf";"param";"alpha:";"parameter of beta dist");
.man.registerArg (".qr.quant.dist.beta.cdf";"param";"x:";"real value");
.man.registerArg (".qr.quant.dist.beta.cdf";"param";"beta:";"parameter of beta dist");
.man.registerArg (".qr.quant.dist.beta.cdf";"return";"";"the cumulative probability of beta distribution");
.man.registerFunc (".qr.quant.dist.beta.cdfInv";".qr";"return the inverse of CDF given beta distribution";".qr.quant.dist.beta.cdfInv";"");
.man.registerArg (".qr.quant.dist.beta.cdfInv";"param";"alpha:";"parameter of beta dist");
.man.registerArg (".qr.quant.dist.beta.cdfInv";"param";"x:";"real number between 0 and 1");
.man.registerArg (".qr.quant.dist.beta.cdfInv";"param";"beta:";"parameter of beta dist");
.man.registerArg (".qr.quant.dist.beta.cdfInv";"return";"";"the y such that P(Y<=y) = x");
.man.registerFunc (".qr.quant.dist.beta.pdf";".qr";"return the probablity density given beta distribution";".qr.quant.dist.beta.pdf";"");
.man.registerArg (".qr.quant.dist.beta.pdf";"param";"alpha:";"parameter of beta dist");
.man.registerArg (".qr.quant.dist.beta.pdf";"param";"x:";"real value");
.man.registerArg (".qr.quant.dist.beta.pdf";"param";"beta:";"parameter of beta dist");
.man.registerArg (".qr.quant.dist.beta.pdf";"return";"";"the probability density of beta distribution");
.man.registerFunc (".qr.quant.dist.bin.cdf";".qr";"return the probablity given binomial distribution";".qr.quant.dist.bin.cdf";"");
.man.registerArg (".qr.quant.dist.bin.cdf";"param";"x:";"integer");
.man.registerArg (".qr.quant.dist.bin.cdf";"param";"p:";"probabilty of success");
.man.registerArg (".qr.quant.dist.bin.cdf";"param";"n:";"total number of trials");
.man.registerArg (".qr.quant.dist.bin.cdf";"return";"";"the cumulative probability P(X<=x) of binomial distirbution");
.man.registerFunc (".qr.quant.dist.bin.pdf";".qr";"return the probablity given binomial distribution";".qr.quant.dist.bin.pdf";"");
.man.registerArg (".qr.quant.dist.bin.pdf";"param";"x:";"integer");
.man.registerArg (".qr.quant.dist.bin.pdf";"param";"p:";"probabilty of success");
.man.registerArg (".qr.quant.dist.bin.pdf";"param";"n:";"total number of trials");
.man.registerArg (".qr.quant.dist.bin.pdf";"return";"";"the probability P(X=x) of binomial distirbution");
.man.registerFunc (".qr.quant.dist.chiSquare.cdf";".qr";"return the cumulative probablity given Chi-Square distribution";".qr.quant.dist.chiSquare.cdf";"");
.man.registerArg (".qr.quant.dist.chiSquare.cdf";"param";"x:";"real value >= 0");
.man.registerArg (".qr.quant.dist.chiSquare.cdf";"param";"k:";"parameter of Chi-Square dist");
.man.registerArg (".qr.quant.dist.chiSquare.cdf";"return";"";"the cumulative probability of Chi-Square distribution");
.man.registerFunc (".qr.quant.dist.chiSquare.pdf";".qr";"return the probablity density given Chi-Square distribution";".qr.quant.dist.chiSquare.pdf";"");
.man.registerArg (".qr.quant.dist.chiSquare.pdf";"param";"x:";"real value >= 0");
.man.registerArg (".qr.quant.dist.chiSquare.pdf";"param";"k:";"parameter of Chi-Square dist");
.man.registerArg (".qr.quant.dist.chiSquare.pdf";"return";"";"the probability density of Chi-Square distribution");
.man.registerFunc (".qr.quant.dist.exp.cdf";".qr";"return the cumulative probablity given exponential distribution";".qr.quant.dist.exp.cdf";"");
.man.registerArg (".qr.quant.dist.exp.cdf";"param";"x:";"real value");
.man.registerArg (".qr.quant.dist.exp.cdf";"param";"lambda:";"rate, time until 1st occurance, default rate etc");
.man.registerArg (".qr.quant.dist.exp.cdf";"return";"";"the cumulative probability P(X<=x) of exponential distirbution");
.man.registerFunc (".qr.quant.dist.exp.cdfInv";".qr";"return the inverse of CDF given exponential distribution";".qr.quant.dist.exp.cdfInv";"");
.man.registerArg (".qr.quant.dist.exp.cdfInv";"param";"x:";"real number between 0 and 1");
.man.registerArg (".qr.quant.dist.exp.cdfInv";"param";"lambda:";"rate, time until 1st occurance, default rate etc");
.man.registerArg (".qr.quant.dist.exp.cdfInv";"return";"";"the y such that P(Y<=y) = x");
.man.registerFunc (".qr.quant.dist.exp.pdf";".qr";"return the probablity density given exponential distribution";".qr.quant.dist.exp.pdf";"");
.man.registerArg (".qr.quant.dist.exp.pdf";"param";"x:";"real value");
.man.registerArg (".qr.quant.dist.exp.pdf";"param";"lambda:";"rate, time until 1st occurance, default rate etc");
.man.registerArg (".qr.quant.dist.exp.pdf";"return";"";"the probability density of exponential distribution");
.man.registerFunc (".qr.quant.dist.f.cdf";".qr";"return the cumulative probablity given F distribution";".qr.quant.dist.f.cdf";"");
.man.registerArg (".qr.quant.dist.f.cdf";"param";"x:";"real value >= 0");
.man.registerArg (".qr.quant.dist.f.cdf";"param";"d1:";"parameter of F dist");
.man.registerArg (".qr.quant.dist.f.cdf";"param";"d2:";"parameter of F dist");
.man.registerArg (".qr.quant.dist.f.cdf";"return";"";"the cumulative probability of F distribution");
.man.registerFunc (".qr.quant.dist.f.cdfInv";".qr";"return the inverse of CDF given F distribution";".qr.quant.dist.f.cdfInv";"");
.man.registerArg (".qr.quant.dist.f.cdfInv";"param";"x:";"real number between 0 and 1");
.man.registerArg (".qr.quant.dist.f.cdfInv";"param";"d1:";"parameter of F dist");
.man.registerArg (".qr.quant.dist.f.cdfInv";"param";"d2:";"parameter of F dist");
.man.registerArg (".qr.quant.dist.f.cdfInv";"return";"";"the y such that P(Y<=y) = x");
.man.registerFunc (".qr.quant.dist.f.pdf";".qr";"return the probablity density given F distribution";".qr.quant.dist.f.pdf";"");
.man.registerArg (".qr.quant.dist.f.pdf";"param";"x:";"real value >= 0");
.man.registerArg (".qr.quant.dist.f.pdf";"param";"d1:";"parameter of F dist");
.man.registerArg (".qr.quant.dist.f.pdf";"param";"d2:";"parameter of F dist");
.man.registerArg (".qr.quant.dist.f.pdf";"return";"";"the probability density of F distribution");
.man.registerFunc (".qr.quant.dist.geo.cdf";".qr";"";".qr.quant.dist.geo.cdf";"");
.man.registerFunc (".qr.quant.dist.geo.pdf";".qr";"geometric";".qr.quant.dist.geo.pdf";"");
.man.registerFunc (".qr.quant.dist.levy.cdf";".qr";"return the cumulative probablity given levy distribution";".qr.quant.dist.levy.cdf";"");
.man.registerArg (".qr.quant.dist.levy.cdf";"param";"x:";"real value >= u");
.man.registerArg (".qr.quant.dist.levy.cdf";"param";"u:";"location");
.man.registerArg (".qr.quant.dist.levy.cdf";"param";"c:";"scale");
.man.registerArg (".qr.quant.dist.levy.cdf";"return";"";"the cumulative probability P(X<=x) of levy distirbution");
.man.registerFunc (".qr.quant.dist.levy.cdfInv";".qr";"return the inverse of CDF given lognormal distribution";".qr.quant.dist.levy.cdfInv";"");
.man.registerArg (".qr.quant.dist.levy.cdfInv";"param";"x:";"real number between 0 and 1");
.man.registerArg (".qr.quant.dist.levy.cdfInv";"param";"u:";"location");
.man.registerArg (".qr.quant.dist.levy.cdfInv";"param";"c:";"scale");
.man.registerArg (".qr.quant.dist.levy.cdfInv";"return";"";"the y such that P(Y<=y) = x");
.man.registerFunc (".qr.quant.dist.levy.pdf";".qr";"return the probablity density given levy distribution";".qr.quant.dist.levy.pdf";"");
.man.registerArg (".qr.quant.dist.levy.pdf";"param";"x:";"real value >= u");
.man.registerArg (".qr.quant.dist.levy.pdf";"param";"u:";"location");
.man.registerArg (".qr.quant.dist.levy.pdf";"param";"c:";"scale");
.man.registerArg (".qr.quant.dist.levy.pdf";"return";"";"the probability density of exponential distribution");
.man.registerFunc (".qr.quant.dist.lognormal.cdf";".qr";"return the cumulative probablity given log-normal distribution";".qr.quant.dist.lognormal.cdf";"");
.man.registerArg (".qr.quant.dist.lognormal.cdf";"param";"x:";"real value");
.man.registerArg (".qr.quant.dist.lognormal.cdf";"param";"u:";"mean");
.man.registerArg (".qr.quant.dist.lognormal.cdf";"param";"sig:";"standard deviation");
.man.registerArg (".qr.quant.dist.lognormal.cdf";"return";"";"the cumulative probability P(X<=x) of log-normal distirbution");
.man.registerFunc (".qr.quant.dist.lognormal.cdfInv";".qr";"return the inverse of CDF given lognormal distribution";".qr.quant.dist.lognormal.cdfInv";"");
.man.registerArg (".qr.quant.dist.lognormal.cdfInv";"param";"x:";"real number between 0 and 1");
.man.registerArg (".qr.quant.dist.lognormal.cdfInv";"param";"u:";"mean");
.man.registerArg (".qr.quant.dist.lognormal.cdfInv";"param";"sig:";"standard deviation");
.man.registerArg (".qr.quant.dist.lognormal.cdfInv";"return";"";"the y such that P(Y<=y) = x");
.man.registerFunc (".qr.quant.dist.lognormal.pdf";".qr";"return the probablity density given log-normal distribution";".qr.quant.dist.lognormal.pdf";"");
.man.registerArg (".qr.quant.dist.lognormal.pdf";"param";"x:";"real value");
.man.registerArg (".qr.quant.dist.lognormal.pdf";"param";"u:";"mean");
.man.registerArg (".qr.quant.dist.lognormal.pdf";"param";"sig:";"standard deviation");
.man.registerArg (".qr.quant.dist.lognormal.pdf";"return";"";"the probability density of log-normal distribution");
.man.registerFunc (".qr.quant.dist.negBin.cdf";".qr";"return the probablity given negative binomial distribution";".qr.quant.dist.negBin.cdf";"");
.man.registerArg (".qr.quant.dist.negBin.cdf";"param";"x:";"integer");
.man.registerArg (".qr.quant.dist.negBin.cdf";"param";"r:";"total number of fails until stop");
.man.registerArg (".qr.quant.dist.negBin.cdf";"param";"p:";"probabilty of success");
.man.registerArg (".qr.quant.dist.negBin.cdf";"return";"";"the cumulative probability P(X<=x) of negative binomial distirbution");
.man.registerFunc (".qr.quant.dist.negBin.pdf";".qr";"return the probablity given negative binomial distribution";".qr.quant.dist.negBin.pdf";"");
.man.registerArg (".qr.quant.dist.negBin.pdf";"param";"x:";"integer");
.man.registerArg (".qr.quant.dist.negBin.pdf";"param";"r:";"total number of fails until stop");
.man.registerArg (".qr.quant.dist.negBin.pdf";"param";"p:";"probabilty of success");
.man.registerArg (".qr.quant.dist.negBin.pdf";"return";"";"the probability P(X=x) of negative binomial distirbution");
.man.registerFunc (".qr.quant.dist.normal.cdf";".qr";"return the cumulative probablity given normal distribution";".qr.quant.dist.normal.cdf";"");
.man.registerArg (".qr.quant.dist.normal.cdf";"param";"x:";"real value");
.man.registerArg (".qr.quant.dist.normal.cdf";"param";"u:";"mean");
.man.registerArg (".qr.quant.dist.normal.cdf";"param";"sig:";"standard deviation");
.man.registerArg (".qr.quant.dist.normal.cdf";"return";"";"the cumulative probability P(X<=x) of normal distirbution");
.man.registerFunc (".qr.quant.dist.normal.cdfInv";".qr";"return the inverse of CDF given normal distribution";".qr.quant.dist.normal.cdfInv";"");
.man.registerArg (".qr.quant.dist.normal.cdfInv";"param";"x:";"real number between 0 and 1");
.man.registerArg (".qr.quant.dist.normal.cdfInv";"param";"u:";"mean");
.man.registerArg (".qr.quant.dist.normal.cdfInv";"param";"sig:";"standard deviation");
.man.registerArg (".qr.quant.dist.normal.cdfInv";"return";"";"the y such that P(Y<=y) = x");
.man.registerFunc (".qr.quant.dist.normal.pdf";".qr";"return the probablity density given normal distribution";".qr.quant.dist.normal.pdf";"");
.man.registerArg (".qr.quant.dist.normal.pdf";"param";"x:";"real value");
.man.registerArg (".qr.quant.dist.normal.pdf";"param";"u:";"mean");
.man.registerArg (".qr.quant.dist.normal.pdf";"param";"sig:";"standard deviation");
.man.registerArg (".qr.quant.dist.normal.pdf";"return";"";"the probability density of normal distribution");
.man.registerFunc (".qr.quant.dist.poisson.cdf";".qr";"return the cumulative probablity given poisson distribution";".qr.quant.dist.poisson.cdf";"");
.man.registerArg (".qr.quant.dist.poisson.cdf";"param";"x:";"integer");
.man.registerArg (".qr.quant.dist.poisson.cdf";"param";"lambda:";"average number of occurance");
.man.registerArg (".qr.quant.dist.poisson.cdf";"return";"";"the probability P(X<=x) of poisson distirbution");
.man.registerFunc (".qr.quant.dist.poisson.pdf";".qr";"return the probablity given poisson distribution";".qr.quant.dist.poisson.pdf";"");
.man.registerArg (".qr.quant.dist.poisson.pdf";"param";"x:";"integer");
.man.registerArg (".qr.quant.dist.poisson.pdf";"param";"lambda:";"average number of occurance");
.man.registerArg (".qr.quant.dist.poisson.pdf";"return";"";"the probability P(X=x) of poisson distirbution");
.man.registerFunc (".qr.quant.dist.poissonBin.cdf";".qr";"return the cumulative probability given Poisson-Binomial distrubtion using DFT";".qr.quant.dist.poissonBin.cdf";"");
.man.registerArg (".qr.quant.dist.poissonBin.cdf";"param";"p:";"probabilities vector of each Bernoulli distribution");
.man.registerArg (".qr.quant.dist.poissonBin.cdf";"param";"k:";"an integer");
.man.registerArg (".qr.quant.dist.poissonBin.cdf";"return";"";"the probability of Pr(K<=k)");
.man.registerFunc (".qr.quant.dist.poissonBin.pdf";".qr";"return the probability given Poisson-Binomial distrubtion using DFT";".qr.quant.dist.poissonBin.pdf";"");
.man.registerArg (".qr.quant.dist.poissonBin.pdf";"param";"p:";"probabilities vector of each Bernoulli distribution");
.man.registerArg (".qr.quant.dist.poissonBin.pdf";"param";"k:";"an integer");
.man.registerArg (".qr.quant.dist.poissonBin.pdf";"return";"";"the probability of Pr(K=k)");
.man.registerFunc (".qr.quant.dist.stdNormal.cdf";".qr";"";".qr.quant.dist.stdNormal.cdf";"");
.man.registerFunc (".qr.quant.dist.stdNormal.cdfInv";".qr";"";".qr.quant.dist.stdNormal.cdfInv";"");
.man.registerFunc (".qr.quant.dist.stdNormal.pdf";".qr";"standard normal";".qr.quant.dist.stdNormal.pdf";"");
.man.registerFunc (".qr.quant.dist.t.cdf";".qr";"return the cumulative probablity given student-t distribution";".qr.quant.dist.t.cdf";"");
.man.registerArg (".qr.quant.dist.t.cdf";"param";"x:";"real value");
.man.registerArg (".qr.quant.dist.t.cdf";"param";"d:";"degree of freedom");
.man.registerArg (".qr.quant.dist.t.cdf";"return";"";"the cumulative probability of student-t distribution");
.man.registerFunc (".qr.quant.dist.t.cdfInv";".qr";"return the inverse of CDF given student-t distribution";".qr.quant.dist.t.cdfInv";"");
.man.registerArg (".qr.quant.dist.t.cdfInv";"param";"x:";"real number between 0 and 1");
.man.registerArg (".qr.quant.dist.t.cdfInv";"param";"d:";"degree of freedom");
.man.registerArg (".qr.quant.dist.t.cdfInv";"return";"";"the inverse of CDF of student-t distribution");
.man.registerFunc (".qr.quant.dist.t.pdf";".qr";"return the probablity density given student-t distribution";".qr.quant.dist.t.pdf";"");
.man.registerArg (".qr.quant.dist.t.pdf";"param";"x:";"real value");
.man.registerArg (".qr.quant.dist.t.pdf";"param";"d:";"degree of freedom");
.man.registerArg (".qr.quant.dist.t.pdf";"return";"";"the probability density of student-t distribution");
.man.registerFunc (".qr.quant.rng.exp";".qr";"generate exponential random variable";".qr.quant.rng.exp";"");
.man.registerArg (".qr.quant.rng.exp";"param";"lambda:";"rate, averageing waiting time until 1st occurance, default rate, etc");
.man.registerArg (".qr.quant.rng.exp";"param";"rng:";"random number generator");
.man.registerArg (".qr.quant.rng.exp";"param";"n:";"sample size");
.man.registerArg (".qr.quant.rng.exp";"return";"";"a vector of random variables drawn from exponential distribution");
.man.registerFunc (".qr.quant.rng.grayCode";".qr";"generate binary gray code on index k";".qr.quant.rng.grayCode";"");
.man.registerArg (".qr.quant.rng.grayCode";"param";"k";"index");
.man.registerArg (".qr.quant.rng.grayCode";"return";"";"the binary grayCode on index k");
.man.registerFunc (".qr.quant.rng.grayCodeList";".qr";"";".qr.quant.rng.grayCodeList";"");
.man.registerFunc (".qr.quant.rng.grayCodeTil";".qr";"generate binary gray code until index k";".qr.quant.rng.grayCodeTil";"");
.man.registerArg (".qr.quant.rng.grayCodeTil";"param";"k";"index");
.man.registerArg (".qr.quant.rng.grayCodeTil";"return";"";"the binary gray code sequence");
.man.registerFunc (".qr.quant.rng.halton";".qr";"generate the halton sequence";".qr.quant.rng.halton";"");
.man.registerArg (".qr.quant.rng.halton";"param";"b:";"bthe base");
.man.registerArg (".qr.quant.rng.halton";"param";"n:";"sample size");
.man.registerArg (".qr.quant.rng.halton";"return";"";"the halton sequence as vector generated by base b");
.man.registerFunc (".qr.quant.rng.logNorm";".qr";"generate log normal random variable";".qr.quant.rng.logNorm";"");
.man.registerArg (".qr.quant.rng.logNorm";"param";"u:";"mean");
.man.registerArg (".qr.quant.rng.logNorm";"param";"rng2:";"random number generator");
.man.registerArg (".qr.quant.rng.logNorm";"param";"sig:";"sigma");
.man.registerArg (".qr.quant.rng.logNorm";"param";"n:";"sample size");
.man.registerArg (".qr.quant.rng.logNorm";"param";"rng1:";"random number generator");
.man.registerArg (".qr.quant.rng.logNorm";"return";"";"a vector of random variables drawn from log-normal distribution");
.man.registerFunc (".qr.quant.rng.norm";".qr";"generate normal random variable using box-muller";".qr.quant.rng.norm";"");
.man.registerArg (".qr.quant.rng.norm";"param";"u:";"mean");
.man.registerArg (".qr.quant.rng.norm";"param";"rng2:";"random number generator");
.man.registerArg (".qr.quant.rng.norm";"param";"sig:";"sigma");
.man.registerArg (".qr.quant.rng.norm";"param";"n:";"sample size");
.man.registerArg (".qr.quant.rng.norm";"param";"rng1:";"random number generator");
.man.registerArg (".qr.quant.rng.norm";"return";"";"a vector of random variables drawn from normal distribution");
.man.registerFunc (".qr.quant.rng.normICDF";".qr";"generate normal random variable using inverse-normal cdf";".qr.quant.rng.normICDF";"");
.man.registerArg (".qr.quant.rng.normICDF";"param";"u:";"mean");
.man.registerArg (".qr.quant.rng.normICDF";"param";"rng:";"random number generator");
.man.registerArg (".qr.quant.rng.normICDF";"param";"sig:";"sigma");
.man.registerArg (".qr.quant.rng.normICDF";"param";"n:";"sample size");
.man.registerArg (".qr.quant.rng.normICDF";"return";"";"a vector of random variables drawn from normal distribution");
.man.registerFunc (".qr.quant.rng.rand";".qr";"generate random numbers between [0,1] using built-in rand function";".qr.quant.rng.rand";"");
.man.registerArg (".qr.quant.rng.rand";"paran";"";"n: sample size");
.man.registerArg (".qr.quant.rng.rand";"return";"";"a vector of random numbers between 0 and 1");
.man.registerFunc (".qr.quant.rng.uniform";".qr";"generate uniform random variable";".qr.quant.rng.uniform";"");
.man.registerArg (".qr.quant.rng.uniform";"param";"rng:";"random number generator");
.man.registerArg (".qr.quant.rng.uniform";"param";"n:";"sample size");
.man.registerArg (".qr.quant.rng.uniform";"return";"";"a vector of uniform random variables");
.man.registerFunc (".qr.quant.stat.gls";".qr";"compute the gls estimate";".qr.quant.stat.gls";"");
.man.registerArg (".qr.quant.stat.gls";"param";"Y:";"explantory variable, dimension: 1xn");
.man.registerArg (".qr.quant.stat.gls";"param";"X:";"regressors (as matrix), dimensin: kxn");
.man.registerArg (".qr.quant.stat.gls";"param";"CovM:";"covariance matrix of the error term, dimension: nxn");
.man.registerArg (".qr.quant.stat.gls";"return";"";"the dictionary contains the information of the fit");
.man.registerFunc (".qr.quant.stat.kurt";".qr";"compute the (excess) kurtosis";".qr.quant.stat.kurt";"");
.man.registerArg (".qr.quant.stat.kurt";"param";"x:";"numeric vector");
.man.registerArg (".qr.quant.stat.kurt";"return";"";"the kurtosis of x");
.man.registerFunc (".qr.quant.stat.ols";".qr";"compute the ols estimate";".qr.quant.stat.ols";"");
.man.registerArg (".qr.quant.stat.ols";"param";"y:";"explantory variable, dimension: 1xn");
.man.registerArg (".qr.quant.stat.ols";"param";"x:";"regressors (as matrix), dimensin: kxn");
.man.registerArg (".qr.quant.stat.ols";"return";"";"the dictionary contains the information of the fit");
.man.registerFunc (".qr.quant.stat.pearsonCor";".qr";"compute the pearson (linear) correlation";".qr.quant.stat.pearsonCor";"");
.man.registerArg (".qr.quant.stat.pearsonCor";"param";"y:";"numeric vector");
.man.registerArg (".qr.quant.stat.pearsonCor";"param";"x:";"numeric vector");
.man.registerArg (".qr.quant.stat.pearsonCor";"return";"";"the pearson correlation between x and y");
.man.registerFunc (".qr.quant.stat.sampleCov";".qr";"compute the sample covariance";".qr.quant.stat.sampleCov";"");
.man.registerArg (".qr.quant.stat.sampleCov";"param";"y:";"numeric vector");
.man.registerArg (".qr.quant.stat.sampleCov";"param";"x:";"numeric vector");
.man.registerArg (".qr.quant.stat.sampleCov";"return";"";"the sample covariance between x and y");
.man.registerFunc (".qr.quant.stat.sampleVar";".qr";"compute the sample variance";".qr.quant.stat.sampleVar";"");
.man.registerArg (".qr.quant.stat.sampleVar";"param";"x:";"numeric vector");
.man.registerArg (".qr.quant.stat.sampleVar";"return";"";"the sample variance of x");
.man.registerFunc (".qr.quant.stat.skew";".qr";"compute the skewness";".qr.quant.stat.skew";"");
.man.registerArg (".qr.quant.stat.skew";"param";"x:";"numeric vector");
.man.registerArg (".qr.quant.stat.skew";"return";"";"the skewness of x");
.man.registerFunc (".qr.quant.stat.spearmanCor";".qr";"compute the spearman (ranked) correlation";".qr.quant.stat.spearmanCor";"");
.man.registerArg (".qr.quant.stat.spearmanCor";"param";"y:";"numeric vector");
.man.registerArg (".qr.quant.stat.spearmanCor";"param";"x:";"numeric vector");
.man.registerArg (".qr.quant.stat.spearmanCor";"return";"";"the spearman correlation between x and y");
.man.registerFunc (".qr.quant.stat.stdErr";".qr";"compute the standard error";".qr.quant.stat.stdErr";"");
.man.registerArg (".qr.quant.stat.stdErr";"param";"x:";"numeric vector");
.man.registerArg (".qr.quant.stat.stdErr";"return";"";"the sample variance between x and y");
.man.registerFunc (".qr.util.dt.addHours";".qr";"add hours";".qr.util.dt.addHours";"");
.man.registerArg (".qr.util.dt.addHours";"param";"y:";"number of hours");
.man.registerArg (".qr.util.dt.addHours";"param";"x:";"datetime");
.man.registerArg (".qr.util.dt.addHours";"return";"";"x + y hours");
.man.registerFunc (".qr.util.dt.addMilliSec";".qr";"add milliseconds";".qr.util.dt.addMilliSec";"");
.man.registerArg (".qr.util.dt.addMilliSec";"param";"y:";"number of milliseconds");
.man.registerArg (".qr.util.dt.addMilliSec";"param";"x:";"datetime");
.man.registerArg (".qr.util.dt.addMilliSec";"return";"";"x + y milliseconds");
.man.registerFunc (".qr.util.dt.addMins";".qr";"add minutes";".qr.util.dt.addMins";"");
.man.registerArg (".qr.util.dt.addMins";"param";"y:";"number of minutes");
.man.registerArg (".qr.util.dt.addMins";"param";"x:";"datetime");
.man.registerArg (".qr.util.dt.addMins";"return";"";"x + y minutes");
.man.registerFunc (".qr.util.dt.addSec";".qr";"add seconds";".qr.util.dt.addSec";"");
.man.registerArg (".qr.util.dt.addSec";"param";"y:";"number of seconds");
.man.registerArg (".qr.util.dt.addSec";"param";"x:";"datetime");
.man.registerArg (".qr.util.dt.addSec";"return";"";"x + y seconds");
.man.registerFunc (".qr.util.dt.dtToDate";".qr";"conver date time to date";".qr.util.dt.dtToDate";"");
.man.registerArg (".qr.util.dt.dtToDate";"param";"x:";"date or datetime");
.man.registerArg (".qr.util.dt.dtToDate";"return";"";"the date repsentation of x");
.man.registerFunc (".qr.util.dt.monthSD";".qr";"get the stat date of the month given date";".qr.util.dt.monthSD";"");
.man.registerArg (".qr.util.dt.monthSD";"param";"x:";"a date");
.man.registerArg (".qr.util.dt.monthSD";"return";"";"the stat date of the month");
.man.registerFunc (".qr.util.dt.toEST";".qr";"conver time to EST from GMT";".qr.util.dt.toEST";"");
.man.registerArg (".qr.util.dt.toEST";"param";"x:";"datetime");
.man.registerArg (".qr.util.dt.toEST";"return";"";"the EST time");
.man.registerFunc (".qr.util.dt.toGMT";".qr";"conver time to GMT from EST";".qr.util.dt.toGMT";"");
.man.registerArg (".qr.util.dt.toGMT";"param";"x:";"datetime");
.man.registerArg (".qr.util.dt.toGMT";"return";"";"the GMT time");
.man.registerFunc (".qr.util.dt.weekDay";".qr";"get the stat date of the week given date";".qr.util.dt.weekDay";"");
.man.registerArg (".qr.util.dt.weekDay";"param";"y:";"0-6, Monday, Tuesday, ..., Sunday");
.man.registerArg (".qr.util.dt.weekDay";"param";"x:";"a date");
.man.registerArg (".qr.util.dt.weekDay";"return";"";"the weekday");
.man.registerFunc (".qr.util.dt.weekSD";".qr";"get the stat date of the week given date";".qr.util.dt.weekSD";"");
.man.registerArg (".qr.util.dt.weekSD";"param";"x:";"a date");
.man.registerArg (".qr.util.dt.weekSD";"return";"";"the stat date of the week");
.man.registerFunc (".qr.util.dt.yearSD";".qr";"get the stat date of the year given date";".qr.util.dt.yearSD";"");
.man.registerArg (".qr.util.dt.yearSD";"param";"x:";"a date");
.man.registerArg (".qr.util.dt.yearSD";"return";"";"the stat date of the year");
.man.registerFunc (".qr.util.dict.isColDict";".qr";"check if input is a column dict";".qr.util.dict.isColDict";"");
.man.registerArg (".qr.util.dict.isColDict";"param";"dict:";"input data. Can be anything");
.man.registerArg (".qr.util.dict.isColDict";"return:";"";"return true if input data is column dictionary. False otherwise");
.man.registerFunc (".qr.util.dict.isDict";".qr";"check if input is a dictionary";".qr.util.dict.isDict";"");
.man.registerArg (".qr.util.dict.isDict";"param";"dict:";"input data. Can be anything");
.man.registerArg (".qr.util.dict.isDict";"return:";"";"return true if input data is dictionary. False otherwise");
.man.registerFunc (".qr.util.dict.isNonKeyedTblDict";".qr";"check if input is a dictionary and not keyed table";".qr.util.dict.isNonKeyedTblDict";"");
.man.registerArg (".qr.util.dict.isNonKeyedTblDict";"param";"dict:";"input data. Can be anything");
.man.registerArg (".qr.util.dict.isNonKeyedTblDict";"return:";"";"return true if input data is dictionary while not keyed table. False otherwise");
.man.registerFunc (".qr.util.list.bin";".qr";"slice the the interval";".qr.util.list.bin";"");
.man.registerArg (".qr.util.list.bin";"param";"end:";"end of the interval");
.man.registerArg (".qr.util.list.bin";"param";"start:";"start of the interval");
.man.registerArg (".qr.util.list.bin";"param";"nbin:";"number of bins");
.man.registerArg (".qr.util.list.bin";"return";"";"the end of each interval");
.man.registerFunc (".qr.util.list.dim";".qr";"get the dimension of the list";".qr.util.list.dim";"");
.man.registerArg (".qr.util.list.dim";"param";"x:";"list");
.man.registerArg (".qr.util.list.dim";"return";"";"dimensions of the list");
.man.registerFunc (".qr.util.list.enlist";".qr";"enlist the input data if it is not list";".qr.util.list.enlist";"");
.man.registerArg (".qr.util.list.enlist";"param";"x:";"Q data type");
.man.registerArg (".qr.util.list.enlist";"return";"";"the list of x");
.man.registerFunc (".qr.util.list.fill";".qr";"fill the empty values of list";".qr.util.list.fill";"");
.man.registerArg (".qr.util.list.fill";"param";"x:";"a list");
.man.registerArg (".qr.util.list.fill";"return";"";"the list with empty values fills by previous values, or following values if empty initially");
.man.registerFunc (".qr.util.list.join";".qr";"merge two list on 1-1 mapping";".qr.util.list.join";"");
.man.registerArg (".qr.util.list.join";"param";"y:";"a list");
.man.registerArg (".qr.util.list.join";"param";"x:";"a list");
.man.registerFunc (".qr.util.list.reshape";".qr";"reshape the list into multi-dimensional list";".qr.util.list.reshape";"");
.man.registerArg (".qr.util.list.reshape";"param";"y:";"dimension");
.man.registerArg (".qr.util.list.reshape";"param";"x:";"list");
.man.registerArg (".qr.util.list.reshape";"return";"";"list of list by reshaping the original list into multi-dimensional list");
.man.registerFunc (".qr.util.list.slice";".qr";"slice this list into chunks given bin size";".qr.util.list.slice";"");
.man.registerArg (".qr.util.list.slice";"param";"y:";"list of bin sizes");
.man.registerArg (".qr.util.list.slice";"param";"x:";"list");
.man.registerArg (".qr.util.list.slice";"return";"";"the list of list by slicing original list into n chucnks");
.man.registerFunc (".qr.util.mem.adjust";".qr";"dynamically adjust memory by integer programming";".qr.util.mem.adjust";"");
.man.registerArg (".qr.util.mem.adjust";"param";"freeUpSpace:";"space need to free up");
.man.registerFunc (".qr.util.mem.adjustUsingR";".qr";"dynamically adjust memory by integer programming, using R";".qr.util.mem.adjustUsingR";"");
.man.registerArg (".qr.util.mem.adjustUsingR";"param";"freeUpSpace:";"space need to free up");
.man.registerFunc (".qr.util.mem.clear";".qr";"clean up all memoized result";".qr.util.mem.clear";"");
.man.registerFunc (".qr.util.mem.clearOnFunc";".qr";"clean up memoized result given function name";".qr.util.mem.clearOnFunc";"");
.man.registerArg (".qr.util.mem.clearOnFunc";"param";"func:";"name of function, a symbol");
.man.registerFunc (".qr.util.mem.clearOnFuncWithArgs";".qr";"clean up memoized result given function name anda arguments";".qr.util.mem.clearOnFuncWithArgs";"");
.man.registerArg (".qr.util.mem.clearOnFuncWithArgs";"param";"args:";"a list of argument");
.man.registerArg (".qr.util.mem.clearOnFuncWithArgs";"param";"func:";"name of function, a symbol");
.man.registerFunc (".qr.util.mem.init";".qr";"initialize cache table if not initialised. set default maximum memory";".qr.util.mem.init";"");
.man.registerFunc (".qr.util.mem.list";".qr";"show the cache table";".qr.util.mem.list";"");
.man.registerArg (".qr.util.mem.list";"return:";"";"the internal cache table");
.man.registerFunc (".qr.util.mem.memoize";".qr";"memoize result from function called with hashkey generated by function and args";".qr.util.mem.memoize";"");
.man.registerArg (".qr.util.mem.memoize";"param";"args:";"list of arguments passed into the function");
.man.registerArg (".qr.util.mem.memoize";"param";"func:";"name of function, a symbol");
.man.registerArg (".qr.util.mem.memoize";"return";"";"the result of func[args]; cache result correspondingly");
.man.registerFunc (".qr.util.mem.priv.getHashKey";".qr";"";".qr.util.mem.priv.getHashKey";"");
.man.registerFunc (".qr.util.mem.setMax";".qr";"set maximum default memory";".qr.util.mem.setMax";"");
.man.registerFunc (".qr.util.ns.isNamespace";".qr";"determine if input is namespace";".qr.util.ns.isNamespace";"");
.man.registerArg (".qr.util.ns.isNamespace";"return:";"";"true if ns is a namespace. false otherwise");
.man.registerArg (".qr.util.ns.isNamespace";"param:";"";"ns, Q datatype");
.man.registerFunc (".qr.util.ns.subspace";".qr";"get first level subspace of the namespace";".qr.util.ns.subspace";"");
.man.registerArg (".qr.util.ns.subspace";"return:";"";"all subspaces give the ns as the parent(root) namespace");
.man.registerArg (".qr.util.ns.subspace";"param:";"";"ns, namespace");
.man.registerFunc (".qr.util.ns.subspaceRecursive";".qr";"get all subspace of the namespace recursvely";".qr.util.ns.subspaceRecursive";"");
.man.registerArg (".qr.util.ns.subspaceRecursive";"return:";"";"all subspaces and their subsequent subspaces give the ns as the parent(root) namespace");
.man.registerArg (".qr.util.ns.subspaceRecursive";"param:";"";"ns, namespace");
.man.registerFunc (".qr.util.qtracer.priv.callStack";".qr";"";".qr.util.qtracer.priv.callStack";"");
.man.registerFunc (".qr.util.qtracer.priv.enter";".qr";"below three functions cannot use .qr.toString otherwise stackoverflow";".qr.util.qtracer.priv.enter";"");
.man.registerFunc (".qr.util.qtracer.priv.exit";".qr";"";".qr.util.qtracer.priv.exit";"");
.man.registerFunc (".qr.util.qtracer.priv.functionShimed";".qr";"qtracer uses its own shim";".qr.util.qtracer.priv.functionShimed";"");
.man.registerFunc (".qr.util.qtracer.priv.throw";".qr";"";".qr.util.qtracer.priv.throw";"");
.man.registerFunc (".qr.util.qtracer.priv.unwrapFunc";".qr";"";".qr.util.qtracer.priv.unwrapFunc";"");
.man.registerFunc (".qr.util.qtracer.priv.wrapFunc";".qr";"private functions";".qr.util.qtracer.priv.wrapFunc";"");
.man.registerFunc (".qr.util.qtracer.unwrap";".qr";"unwrap all functions defined in given namespace.";".qr.util.qtracer.unwrap";"");
.man.registerArg (".qr.util.qtracer.unwrap";"param";"ns:";"namespace or function");
.man.registerFunc (".qr.util.qtracer.unwrapAll";".qr";"unwrap all functions ever wrapped";".qr.util.qtracer.unwrapAll";"");
.man.registerFunc (".qr.util.qtracer.wrap";".qr";"wrap all functions defined in given namespace. functions are wraped to hook the call stack to achieve debug trace";".qr.util.qtracer.wrap";"");
.man.registerArg (".qr.util.qtracer.wrap";"param";"ns:";"namespace or function");
.man.registerFunc (".qr.util.raze.razeAll";".qr";"raze input into single dimension";".qr.util.raze.razeAll";"");
.man.registerArg (".qr.util.raze.razeAll";"param";"x:";"q data type");
.man.registerArg (".qr.util.raze.razeAll";"return";"";"the flatern value of x by reducing nested data structure into single dimension");
.man.registerFunc (".qr.util.raze.razeDict";".qr";"raze list of dictionaries into single dictionary";".qr.util.raze.razeDict";"");
.man.registerArg (".qr.util.raze.razeDict";"param";"x:";"list of dictionaries");
.man.registerArg (".qr.util.raze.razeDict";"return";"";"the single dictionary by appending all (nested) list of dictionaries");
.man.registerFunc (".qr.util.raze.razeTable";".qr";"raze list of tables into single table";".qr.util.raze.razeTable";"");
.man.registerArg (".qr.util.raze.razeTable";"param";"x:";"list of tables");
.man.registerArg (".qr.util.raze.razeTable";"return";"";"the single table by appending all (nested) list of tables");
.man.registerFunc (".qr.util.ns.ls";".qr";"list all first level function, varialb,e and subspace definition given namespace";".qr.util.ns.ls";"");
.man.registerArg (".qr.util.ns.ls";"param:";"";"ns, namespace");
.man.registerArg (".qr.util.ns.ls";"return";"";"a table contains all the function/variable/namespace definiton given ns as parent(root) namespace");
.man.registerFunc (".qr.util.ns.lsr";".qr";"list all ffunction, varialb,e and subspace definition given namespace, recursively";".qr.util.ns.lsr";"");
.man.registerArg (".qr.util.ns.lsr";"param:";"";"ns, namespace");
.man.registerArg (".qr.util.ns.lsr";"return";"";"a table contains all the (nested) function/variable definiton given ns as parent(root) namespace");
.man.registerFunc (".qr.util.ns.priv.getDef";".qr";"";".qr.util.ns.priv.getDef";"");
.man.registerFunc (".qr.util.remote.arpc";".qr";"open remote connection and execute code in remote process asynchronously";".qr.util.remote.arpc";"");
.man.registerArg (".qr.util.remote.arpc";"param";"y:";"code to execute");
.man.registerArg (".qr.util.remote.arpc";"param";"x:";"host");
.man.registerArg (".qr.util.remote.arpc";"return";"";"res of the executable code in remote process");
.man.registerFunc (".qr.util.remote.exist";".qr";"check if the handle exists giving server";".qr.util.remote.exist";"");
.man.registerArg (".qr.util.remote.exist";"param";"x:";"host");
.man.registerFunc (".qr.util.remote.init";".qr";"init the rpc module";".qr.util.remote.init";"");
.man.registerFunc (".qr.util.remote.list";".qr";"list the existing rpc handles";".qr.util.remote.list";"");
.man.registerFunc (".qr.util.remote.mrpc";".qr";"do .qr.util.remote.rpc and memoize";".qr.util.remote.mrpc";"");
.man.registerArg (".qr.util.remote.mrpc";"param";"y:";"code to execute");
.man.registerArg (".qr.util.remote.mrpc";"param";"x:";"host");
.man.registerArg (".qr.util.remote.mrpc";"return";"";"and cache res of the executable code in remote process");
.man.registerFunc (".qr.util.remote.rpc";".qr";"open remote connection and execute code in remote process synchronously";".qr.util.remote.rpc";"");
.man.registerArg (".qr.util.remote.rpc";"param";"y:";"code to execute");
.man.registerArg (".qr.util.remote.rpc";"param";"x:";"host");
.man.registerArg (".qr.util.remote.rpc";"return";"";"res of the executable code in remote process");
.man.registerFunc (".qr.util.schema.addCol";".qr";"construct the schema entry given the colName and type";".qr.util.schema.addCol";"");
.man.registerArg (".qr.util.schema.addCol";"param";"colNameIn:";"the name of column");
.man.registerArg (".qr.util.schema.addCol";"param";"typeNameIn:";"must be Q datatype, with suffix \"s\" to indicate as list");
.man.registerArg (".qr.util.schema.addCol";"return";"";"the schema entry");
.man.registerFunc (".qr.util.schema.addTbl";".qr";"register the schema with table name";".qr.util.schema.addTbl";"");
.man.registerArg (".qr.util.schema.addTbl";"param:";"tablNameIn,";"the name of the schema");
.man.registerArg (".qr.util.schema.addTbl";"param:";"schemaIn,";"schema to register, constructed by .qr.util.schema.addCol");
.man.registerFunc (".qr.util.schema.formatTbl";".qr";"format the table given registered schema";".qr.util.schema.formatTbl";"");
.man.registerArg (".qr.util.schema.formatTbl";"param";"tbl:";"a Q table");
.man.registerArg (".qr.util.schema.formatTbl";"param";"tblNameIn:";"the name of the schema");
.man.registerArg (".qr.util.schema.formatTbl";"return";"";"the table formated by Q schema, with column types automatially promoted");
.man.registerFunc (".qr.util.schema.getEmptyTbl";".qr";"return the empty table given registered schema";".qr.util.schema.getEmptyTbl";"");
.man.registerArg (".qr.util.schema.getEmptyTbl";"param";"tblNameIn:";"the name of the schema");
.man.registerArg (".qr.util.schema.getEmptyTbl";"return";"";"the corresponding empty table with meta");
.man.registerFunc (".qr.util.schema.getSchemaCodes";".qr";"return the codes to construct the corresponding schema given table";".qr.util.schema.getSchemaCodes";"");
.man.registerArg (".qr.util.schema.getSchemaCodes";"param";"tbl:";"a Q table");
.man.registerArg (".qr.util.schema.getSchemaCodes";"return";"";"the schema codes matching the meta of tbl");
.man.registerFunc (".qr.util.schema.init";".qr";"init schema";".qr.util.schema.init";"");
.man.registerFunc (".qr.util.schema.priv.getSchema";".qr";"";".qr.util.schema.priv.getSchema";"");
.man.registerFunc (".qr.util.shimming.list";".qr";"list shimed function";".qr.util.shimming.list";"");
.man.registerFunc (".qr.util.shimming.priv.list";".qr";"";".qr.util.shimming.priv.list";"");
.man.registerFunc (".qr.util.shimming.priv.shim";".qr";"";".qr.util.shimming.priv.shim";"");
.man.registerFunc (".qr.util.shimming.priv.shimed";".qr";"";".qr.util.shimming.priv.shimed";"");
.man.registerFunc (".qr.util.shimming.priv.unshim";".qr";"";".qr.util.shimming.priv.unshim";"");
.man.registerFunc (".qr.util.shimming.priv.unshimAll";".qr";"";".qr.util.shimming.priv.unshimAll";"");
.man.registerFunc (".qr.util.shimming.shim";".qr";"shim function";".qr.util.shimming.shim";"");
.man.registerArg (".qr.util.shimming.shim";"param";"funcImpl:";"shimming function implementation");
.man.registerArg (".qr.util.shimming.shim";"param";"funcName:";"function to shim");
.man.registerFunc (".qr.util.shimming.unshim";".qr";"unshim function";".qr.util.shimming.unshim";"");
.man.registerArg (".qr.util.shimming.unshim";"param";"funcName:";"function to shim");
.man.registerFunc (".qr.util.shimming.unshimAll";".qr";"unshim everything";".qr.util.shimming.unshimAll";"");
.man.registerFunc (".qr.util.tbl.crossTab";".qr";"crosstab statics on table";".qr.util.tbl.crossTab";"");
.man.registerArg (".qr.util.tbl.crossTab";"param";"v:";"exposed value v");
.man.registerArg (".qr.util.tbl.crossTab";"param";"t:";"Q table");
.man.registerArg (".qr.util.tbl.crossTab";"param";"b:";"group by columns");
.man.registerArg (".qr.util.tbl.crossTab";"param";"p:";"pivot column, column type must be symbol");
.man.registerArg (".qr.util.tbl.crossTab";"return";"";"the crosstab *pivot table");
.man.registerFunc (".qr.util.tbl.isKeyedTbl";".qr";"check if input is a keyed tables";".qr.util.tbl.isKeyedTbl";"");
.man.registerArg (".qr.util.tbl.isKeyedTbl";"param";"tbl:";"input data. Can be anything");
.man.registerArg (".qr.util.tbl.isKeyedTbl";"return:";"";"return true if input data is keyed table. False otherwise");
.man.registerFunc (".qr.util.tbl.isNonEmptyTbl";".qr";"check if input is non-empty tables";".qr.util.tbl.isNonEmptyTbl";"");
.man.registerArg (".qr.util.tbl.isNonEmptyTbl";"param";"tbl:";"input data. Can be anything");
.man.registerArg (".qr.util.tbl.isNonEmptyTbl";"return:";"";"return true if input data is not an empty table. False otherwise");
.man.registerFunc (".qr.util.tbl.lj";".qr";"Safely left join table on columns specified";".qr.util.tbl.lj";"");
.man.registerArg (".qr.util.tbl.lj";"param";"rTbl:";"tables on the right for left join");
.man.registerArg (".qr.util.tbl.lj";"param";"colsToJoin:";"columns to join both table");
.man.registerArg (".qr.util.tbl.lj";"param";"lTabl:";"tables on the left for left join");
.man.registerArg (".qr.util.tbl.lj";"return:";"";"a table contains resulted from left joining the lTbl with rTbl");
.man.registerFunc (".qr.util.tbl.prepends";".qr";"prepend the column names with prefix";".qr.util.tbl.prepends";"");
.man.registerArg (".qr.util.tbl.prepends";"param";"prefix:";"prefix to be appended in front of the column name");
.man.registerArg (".qr.util.tbl.prepends";"param";"tbl:";"a table");
.man.registerArg (".qr.util.tbl.prepends";"param";"exceptCols:";"exceptional columns which will NOT be appended");
.man.registerArg (".qr.util.tbl.prepends";"return:";"";"the table with column names appended by prefix");
.man.registerFunc (".qr.util.tbl.priv.crossSinglePivot";".qr";"";".qr.util.tbl.priv.crossSinglePivot";"");
.man.registerFunc (".qr.util.tbl.splitCol";".qr";"split the string column and ungroup";".qr.util.tbl.splitCol";"");
.man.registerArg (".qr.util.tbl.splitCol";"param";"t:";"Q table");
.man.registerArg (".qr.util.tbl.splitCol";"param";"c:";"column to ungroup, in symbol");
.man.registerArg (".qr.util.tbl.splitCol";"return";"";"the columns ungroup by c");
.man.registerFunc (".qr.util.tbl.uj";".qr";"Safely union join table on columns specified";".qr.util.tbl.uj";"");
.man.registerArg (".qr.util.tbl.uj";"param";"rTbl:";"tables on the right for left join");
.man.registerArg (".qr.util.tbl.uj";"param";"lTabl:";"tables on the left for left join");
.man.registerArg (".qr.util.tbl.uj";"return:";"";"a table contains resulted from union joining between two tables");
.man.registerFunc ("qr.util.tbl.priv.symPivotMerge";".";"";"qr.util.tbl.priv.symPivotMerge";"");
.man.registerFunc (".qr.util.removeTimer";".qr";"stop the timer by id";".qr.util.removeTimer";"");
.man.registerArg (".qr.util.removeTimer";"param";"x:";"integer");
.man.registerFunc (".qr.util.timer.forwardStart";".qr";"forward start the timer";".qr.util.timer.forwardStart";"");
.man.registerArg (".qr.util.timer.forwardStart";"param";"freq:";"frequency of the timer");
.man.registerArg (".qr.util.timer.forwardStart";"param";"func:";"functor to be executed on tick");
.man.registerArg (".qr.util.timer.forwardStart";"param";"st:";"start time of the timer");
.man.registerFunc (".qr.util.timer.init";".qr";"init the timer";".qr.util.timer.init";"");
.man.registerFunc (".qr.util.timer.list";".qr";"list the timer";".qr.util.timer.list";"");
.man.registerFunc (".qr.util.timer.priv.exec";".qr";"";".qr.util.timer.priv.exec";"");
.man.registerFunc (".qr.util.timer.priv.execFunc";".qr";"";".qr.util.timer.priv.execFunc";"");
.man.registerFunc (".qr.util.timer.priv.getMillisecond";".qr";"private functions";".qr.util.timer.priv.getMillisecond";"");
.man.registerFunc (".qr.util.timer.removeAll";".qr";"clear all the timers";".qr.util.timer.removeAll";"");
.man.registerFunc (".qr.util.timer.removeByFunctor";".qr";"stop the timer by functor";".qr.util.timer.removeByFunctor";"");
.man.registerArg (".qr.util.timer.removeByFunctor";"param";"x:";"functor");
.man.registerFunc (".qr.util.timer.start";".qr";"start the timer now";".qr.util.timer.start";"");
.man.registerArg (".qr.util.timer.start";"param";"freq:";"frequency of the timer");
.man.registerArg (".qr.util.timer.start";"param";"func:";"functor to be executed on tick");
.man.registerFunc (".qr.util.timer.startAbs";".qr";"start the absolute timer";".qr.util.timer.startAbs";"");
.man.registerArg (".qr.util.timer.startAbs";"param";"func:";"functor to be executed on tick");
.man.registerFunc (".qr.util.timer.tick";".qr";"";".qr.util.timer.tick";"");
